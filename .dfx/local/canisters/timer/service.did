type TransformArgs = 
 record {
   context: blob;
   response: HttpResponsePayload;
 };
type HttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type HttpHeader = 
 record {
   name: text;
   value: text;
 };
type CanisterHttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
service : {
  TextToNat2: (text) -> (float64);
  queryDetails: (text) -> (opt text);
  queryLastIndex: () -> (text) query;
  queryRecord: (nat64) -> (opt text);
  queryRecordCount: () -> (nat64);
  queryUserVftTotal: (text) -> (opt text);
  transform: (TransformArgs) -> (CanisterHttpResponsePayload) query;
  work: () -> ();
}
