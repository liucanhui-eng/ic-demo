// Version: 1.0.0
type List<T> = ?(T, List<T>);
type MetadataDesc = [MetadataPart];
type MetadataKeyVal = {key : Text; val : MetadataVal};
type MetadataPart =
  {data : Blob; key_val_data : [MetadataKeyVal]; purpose : MetadataPurpose};
type MetadataPurpose = {#Preview; #Rendered};
type MetadataVal =
  {
    #BlobContent : Blob;
    #Nat16Content : Nat16;
    #Nat32Content : Nat32;
    #Nat64Content : Nat64;
    #Nat8Content : Nat8;
    #NatContent : Nat;
    #TextContent : Text
  };
type Nft =
  {
    from : Principal;
    id : TokenId;
    meta : MetadataDesc;
    op : Text;
    owner : Principal;
    tid : Nat;
    to : Principal
  };
type Region__1 = Region;
type Region__2 = Region__1;
type TokenId = Nat64;
type VftUserInfo =
  {
    var details : Text;
    nft : ?Nft;
    task_code : Text;
    userId : Text;
    vft_total : ?Float;
    var vft_total_statements : Text;
    wallet : ?Text
  };
actor {
  stable var Record :
    {
      bytes : Region__2;
      var bytes_count : Nat64;
      var elems_count : Nat64;
      var userInfoList : List<VftUserInfo>;
      vftRecord : Region__2
    };
  stable var errorList : ?(Text, List<Text>);
  stable var lastIndex : Text;
  stable var timerId : Nat
};
